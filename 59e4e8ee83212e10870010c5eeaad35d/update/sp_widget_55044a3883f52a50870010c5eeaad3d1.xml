<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function DoctorAvailabilityController($location, $timeout, $http) {
  var c = this;
  const docId = $location.search().sysparm_sys_id;
	
  console.log('Doctor ID from URL:', docId);
	
  if (!docId) {
    console.error('No sysparm_sys_id');
    return;
  }
  c.data = { sys_id: docId, events: [] };
	
  // Fixed booking function with proper debugging
  c.bookAppointment = function(timeslotId, startTime, endTime) {
    console.log('=== BOOKING DEBUG ===');
    console.log('timeslotId:', timeslotId);
    console.log('startTime:', startTime);
    console.log('endTime:', endTime);
    console.log('docId:', docId);
    
    // Handle the case where timeslotId might be undefined
    const actualTimeslotId = timeslotId || 'unknown';
    
    // Format dates properly if they're Date objects
    let formattedStartTime = startTime;
    let formattedEndTime = endTime;
    
    if (startTime instanceof Date) {
      formattedStartTime = startTime.toISOString();
    }
    if (endTime instanceof Date) {
      formattedEndTime = endTime.toISOString();
    }
    
    const baseUrl = '/sp';
    const url = new URL(baseUrl, window.location.origin);
    
    url.searchParams.set('id', 'doctor_booking_form');
    url.searchParams.set('sysparm_sys_id', docId);
    url.searchParams.set('sysparm_timeslot', actualTimeslotId);
    url.searchParams.set('sysparm_start', formattedStartTime);
    url.searchParams.set('sysparm_end', formattedEndTime);
    
    console.log('Final URL:', url.href);
    window.location.href = url.href;
  };

  $http.get('/api/now/table/x_1032697_easy_a_0_u_timeslot', {
    params: {
      sysparm_query: `u_is_available=true`,
      sysparm_fields: 'sys_id,u_doctor,u_start_time,u_end_time,u_is_available'
    }
  }).then(resp => {
    console.log('Raw API Response:', resp.data.result);
    
    resp.data.result.forEach(r => {
      console.log('Processing record:', r);
      
      // FIXED: Store the sys_id as the event ID and in extendedProps
      c.data.events.push({
        id: r.sys_id,                    // This becomes info.event.id
        title: 'Available',
        start: r.u_start_time,
        end: r.u_end_time,
        allDay: false,
        backgroundColor: '#28a745',
        borderColor: '#28a745',
        // FIXED: Add the timeslot ID in extendedProps
        extendedProps: {
          timeslotId: r.sys_id           // This is what you were missing!
        }
      });
    });
    
    console.log('Final events array:', c.data.events);
    
    $timeout(() => {
      const container = document.getElementById('calendar-' + docId);
      if (!container || !window.FullCalendar) {
        console.error('Calendar container or FullCalendar not found');
        return;
      }
      
      const calendar = new FullCalendar.Calendar(container, {
        initialView: 'timeGridWeek',
        events: c.data.events,
        
        // FIXED: Proper event click handler
        eventClick: function(info) {
          console.log('=== EVENT CLICK DEBUG ===');
          console.log('Full event object:', info.event);
          console.log('Event ID:', info.event.id);
          console.log('Event start:', info.event.start);
          console.log('Event end:', info.event.end);
          console.log('Extended props:', info.event.extendedProps);
          
          // Prevent default behavior
          info.jsEvent.preventDefault();
          
          // FIXED: Get the correct values
          const timeslotId = info.event.id; // Use the event ID (which is sys_id)
          const startTime = info.event.start;
          const endTime = info.event.end;
          
          console.log('Calling bookAppointment with:', {
            timeslotId,
            startTime,
            endTime
          });
          
          // Call booking function
          c.bookAppointment(timeslotId, startTime, endTime);
        },
        
        // Optional: Change cursor on hover
        eventMouseEnter: function(info) {
          info.el.style.cursor = 'pointer';
        },
        
        // Optional: Add tooltip
        eventDidMount: function(info) {
          info.el.setAttribute('title', 'Click to book this appointment');
        }
      });
      
      calendar.render();
      console.log('Calendar rendered with events:', c.data.events.length);
    });
  }).catch(err => console.error('Could not load slots', err));
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.calendar{
  backgorund-color:"red"
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>doctor_availability</id>
        <internal>false</internal>
        <link><![CDATA[function Link() {
  // 1) load the stylesheet
  return loadAsset('css',
    'https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css'
  )
  // 2) then load the script
  .then(() => loadAsset('js',
    'https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js'
  ));
}

// simple helper; you can copy/paste this below your Link() above
function loadAsset(type, url) {
  return new Promise((resolve, reject) => {
    const tag = type === 'css'? document.createElement('link'): document.createElement('script');
    if (type === 'css') {
      tag.rel = 'stylesheet';
      tag.href = url;
    } else {
      tag.src = url;
    }
    tag.onload  = () => resolve();
    tag.onerror = () => reject(`Failed to load ${url}`);
    document.head.appendChild(tag);
  });
}
]]></link>
        <name>Doctor Availability</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  // 1) grab the doctor sys_id from the URL (or widget option)
  data.sys_id = options.sys_id || $sp.getParameter('sysparm_sys_id');
  if (!data.sys_id) {
    data.error = 'No doctor selected';
    return;
  }

  // 2) query your timeslot table
  var gr = new GlideRecord('x_1032697_easy_a_0_u_timeslot');
  gr.addQuery('u_doctor', data.sys_id);
  gr.addQuery('u_is_available', true);
  gr.query();

  // 3) build up the events array
  data.events = [];
  while (gr.next()) {
    data.events.push({
      id:    gr.getValue('sys_id'),
      title: 'Available',
      start: gr.getValue('u_start_time'),
      end:   gr.getValue('u_end_time')
    });
  }
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-26 14:12:06</sys_created_on>
        <sys_id>55044a3883f52a50870010c5eeaad3d1</sys_id>
        <sys_mod_count>72</sys_mod_count>
        <sys_name>Doctor Availability</sys_name>
        <sys_package display_value="Easy_Appointments" source="x_1032697_easy_a_0">59e4e8ee83212e10870010c5eeaad35d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Easy_Appointments">59e4e8ee83212e10870010c5eeaad35d</sys_scope>
        <sys_update_name>sp_widget_55044a3883f52a50870010c5eeaad3d1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-30 13:58:47</sys_updated_on>
        <template><![CDATA[<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>

<div ng-if="c.data.sys_id"
     id="calendar-{{c.data.sys_id}}"
     class="calendar"></div>

<!-- debug only: remove when working -->
<!--<pre>SYS_ID = {{c.data.sys_id}}</pre> -->
<!-- <pre>EVENTS = {{c.data.events|json}}</pre> -->
]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>55044a3883f52a50870010c5eeaad3d1</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-26 14:12:06</sys_created_on>
        <sys_id>5d044a3883f52a50870010c5eeaad3d3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-26 14:12:06</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
